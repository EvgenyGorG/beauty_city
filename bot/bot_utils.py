from telegram import InlineKeyboardMarkup, InlineKeyboardButton

import menu_constants


def build_keyboard(action_type, button_rows):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç."""
    keyboard = [
        [InlineKeyboardButton(text=button_label, callback_data=f"{action_type}_{row_index}")]
        for row_index, [button_label] in enumerate(button_rows)
    ]
    return InlineKeyboardMarkup(keyboard)


def back_to_menu():
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    keyboard = [[InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='to_menu')]]
    return InlineKeyboardMarkup(keyboard)


def handle_back_to_menu(update, context, param=None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"."""
    query = update.callback_query
    query.answer()
    query.edit_message_text(
        text="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=build_keyboard('main_menu', menu_constants.MAIN_MENU)
    )


def handle_main_menu(update, context, param=None):
    query = update.callback_query
    query.answer()

    if param == '0':
        query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–ø–∏—Å–∏:",
            reply_markup=build_keyboard('appointment_type', menu_constants.APPOINTMENT_TYPE)
        )
    elif param == '1':
        handle_manage_bookings(update, context)
    elif param == '2':
        handle_manager_contact(update, context)
    elif param == '3':
        handle_feedback(update, context)
    else:
        query.edit_message_text(
            text="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            reply_markup=build_keyboard('main_menu', menu_constants.MAIN_MENU)
        )


def handle_appointment_type(update, context, param=None):
    query = update.callback_query
    query.answer()

    if param == '0':
        context.user_data['booking'] = {'type': 'by_address'}
        query.edit_message_text(
            text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–ø–∏—Å—å –ø–æ –∞–¥—Ä–µ—Å—É. –í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ª–æ–Ω:",
            reply_markup=build_keyboard('choose_address', menu_constants.CHOOSE_ADDRESS)
        )
    elif param == '1':
        context.user_data['booking'] = {'type': 'by_master'}
        query.edit_message_text(
            text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–ø–∏—Å—å –∫ –ª—é–±–∏–º–æ–º—É –º–∞—Å—Ç–µ—Ä—É. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            reply_markup=back_to_menu()
        )
    else:
        query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=back_to_menu())


def handle_choose_address(update, context, param=None):
    query = update.callback_query
    query.answer()

    if param is None:
        query.edit_message_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=back_to_menu())
        return

    index = int(param)
    address = menu_constants.CHOOSE_ADDRESS[index][0]

    if 'booking' not in context.user_data:
        context.user_data['booking'] = {}
    context.user_data['booking']['address'] = address

    query.edit_message_text(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {address}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:",
        reply_markup=build_keyboard('choose_service_category', menu_constants.SERVICE_CATEGORIES)
    )


def handle_choose_service_category(update, context, param=None):
    query = update.callback_query
    query.answer()

    if param is None:
        query.edit_message_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=back_to_menu())
        return

    index = int(param)
    service_category = menu_constants.SERVICE_CATEGORIES[index][0]

    if 'booking' not in context.user_data:
        context.user_data['booking'] = {}
    context.user_data['booking']['service_category'] = service_category

    services = menu_constants.CATEGORY_TO_SERVICES.get(service_category, [])

    query.edit_message_text(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {service_category}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —É—Å–ª—É–≥—É:",
        reply_markup=build_keyboard('choose_service', services)
    )


def handle_concrete_service(update, context, param=None):
    query = update.callback_query
    query.answer()

    booking = context.user_data.get('booking', {})
    service_category = booking.get('service_category')

    if not service_category or param is None:
        query.edit_message_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=back_to_menu())
        return

    index = int(param)
    services_list = menu_constants.CATEGORY_TO_SERVICES.get(service_category, [])
    selected_service = services_list[index][0]

    booking['service'] = selected_service
    context.user_data['booking'] = booking

    query.edit_message_text(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É: {selected_service}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:",
        reply_markup=build_keyboard('choose_master', menu_constants.CATEGORY_TO_MASTERS.get(service_category, []))
    )


def handle_choose_master(update, context, param=None):
    query = update.callback_query
    query.answer()

    booking = context.user_data.get('booking', {})
    service_category = booking.get('service_category')

    index = int(param)
    masters_list = menu_constants.CATEGORY_TO_MASTERS.get(service_category, [])
    selected_master = masters_list[index][0]

    booking['master'] = selected_master
    context.user_data['booking'] = booking

    query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:",
        reply_markup=build_keyboard('choose_date', menu_constants.AVAILABLE_DATES)
    )
    context.user_data['current_step'] = 'choose_date'


def handle_choose_date(update, context, param=None):
    query = update.callback_query
    query.answer()

    if param is not None:
        index = int(param)
        selected_date = menu_constants.AVAILABLE_DATES[index][0]
        context.user_data['selected_date'] = selected_date

        reply_markup = build_keyboard('choose_time', menu_constants.AVAILABLE_TIMES)
        query.edit_message_text(
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selected_date}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
            reply_markup=reply_markup
        )
    else:
        reply_markup = build_keyboard('choose_date', menu_constants.AVAILABLE_DATES)
        query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=reply_markup
        )


def handle_choose_time(update, context, param=None):
    query = update.callback_query
    query.answer()

    if param is not None:
        selected_time = menu_constants.AVAILABLE_TIMES[int(param)][0]
        context.user_data['selected_time'] = selected_time

        selected_date = context.user_data.get('selected_date', '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞')
        query.edit_message_text(
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_date} –≤ {selected_time}.\n\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë –∏–º—è:"
        )

        context.user_data['current_step'] = 'ask_name'
    else:
        reply_markup = build_keyboard('choose_time', menu_constants.AVAILABLE_TIMES)
        query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
            reply_markup=reply_markup
        )


def handle_ask_name(update, context, param=None):
    user_data = context.user_data
    user_name = update.message.text.strip()

    user_data['name'] = user_name
    user_data['current_step'] = 'ask_phone'  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É

    update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ, {user_name}! üå∏\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    )


from telegram import InlineKeyboardButton, InlineKeyboardMarkup

def handle_ask_phone(update, context, param=None):
    user_data = context.user_data
    phone = update.message.text.strip()

    user_data['phone'] = phone
    # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º current_step, —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏

    booking = user_data.get('booking', {})
    selected_date = user_data.get('selected_date', '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞')
    selected_time = user_data.get('selected_time', '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ')
    user_name = user_data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')

    policy_url = "https://drive.google.com/file/d/1woTyqjWjcvs8geKT56oJbdK5zKw3G3Rm/view?usp=sharing"

    confirmation_message = (
        f"–°–ø–∞—Å–∏–±–æ, {user_name}! üå∏\n\n"
        f"–í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É *{booking.get('service')}* "
        f"–ø–æ –∞–¥—Ä–µ—Å—É *{booking.get('address')}*,\n"
        f"–∫ –º–∞—Å—Ç–µ—Ä—É *{booking.get('master')}*,\n"
        f"–Ω–∞ *{selected_date} –≤ {selected_time}*.\n"
        f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏: *{phone}*.\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—è —Å–≤–æ—é –∑–∞–ø–∏—Å—å, –≤—ã –¥–∞–µ—Ç–µ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–µ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É "
        f"–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∏–º—è, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞) –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å "
        f"[–ü–æ–ª–∏—Ç–∏–∫–æ–π]({policy_url})."
    )

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='confirm_booking'),
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –∏ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='cancel_booking'),
        ]
    ])

    update.message.reply_text(
        confirmation_message,
        parse_mode='Markdown',
        reply_markup=keyboard
    )


def handle_manage_bookings(update, context, param=None):
    query = update.callback_query
    query.answer()
    query.edit_message_text(
        text="–ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏"
    )


def handle_confirm_booking(update, context, param=None):
    user_data = context.user_data

    booking = user_data.get('booking', {})  # <-- –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ª–æ–≤–∞—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    selected_date = user_data.get('selected_date', '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞')
    selected_time = user_data.get('selected_time', '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ')
    user_name = user_data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')

    confirm_text = (
        f"üéâ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ *{booking.get('service', '—É—Å–ª—É–≥—É')}*\n"
        f"üìÖ {selected_date}, ‚è∞ {selected_time} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ BeautyCity! –ú—ã —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—ë–º –≤–∞—Å üòä\n"
        "–ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –∏–ª–∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–µ–π –∑–∞–ø–∏—Å—å—é –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –±–æ—Ç–∞!"
    )

    reply_markup = back_to_menu()

    if update.callback_query:
        update.callback_query.answer()
        update.callback_query.edit_message_text(confirm_text, parse_mode='Markdown', reply_markup=reply_markup)
    else:
        update.message.reply_text(confirm_text, parse_mode='Markdown', reply_markup=reply_markup)

    user_data['current_step'] = None


def handle_cancel_booking(update, context, param=None):
    user_data = context.user_data

    user_data.pop('booking', None)
    user_data.pop('selected_date', None)
    user_data.pop('selected_time', None)
    user_data['current_step'] = None

    cancel_text = (
        "‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
        "–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ —Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."
    )

    if update.callback_query:
        update.callback_query.answer()
        update.callback_query.edit_message_text(cancel_text, reply_markup=back_to_menu())
    else:
        update.message.reply_text(cancel_text, reply_markup=back_to_menu())


def handle_manager_contact(update, context, param=None):
    """–ö–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∞–ª–æ–Ω–∞."""
    query = update.callback_query
    query.answer()
    query.edit_message_text(
        text="–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏: \n"
             "+7 (999) 000-11-22 \n"
             "–ù–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª—É—á—à–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º ‚Äî —ç—Ç–æ –±—ã—Å—Ç—Ä–æ, —É–¥–æ–±–Ω–æ –∏ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏–π!\n"
             "–ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ–π –æ–ø—ã—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª—ë–≥–∫–∏–º –∏ –ø—Ä–∏—è—Ç–Ω—ã–º üíñ",
        reply_markup=back_to_menu()
    )


def handle_feedback(update, context, param=None):
    """–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤."""
    query = update.callback_query
    query.answer()
    query.edit_message_text(
        text='–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ä–µ—à–∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –Ω–∞–º–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é! '
             '–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∑—ã–≤, –∏–¥–µ—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n\n'
             '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä —Å –≤–∞–º–∏ —Å–≤—è–∑–∞–ª—Å—è, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ–± —ç—Ç–æ–º —É–ø–æ–º—è–Ω—É—Ç—å üå∏'
    )
    context.user_data['waiting_feedback'] = True
